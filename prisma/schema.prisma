// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url        = env("DATABASE_URL")
    extensions = [pg_uuidv7]
}

enum Status {
    ACTIVE
    INACTIVE
    ARCHIVED
}

/// erDiagram
///     ReleaseComponent {
///         string repository
///         string displayName
///         string releaseNamePattern
///     }
///
///     JiraRelease {
///         string name
///         timestamptz syncedAt
///     }
///
///     ReleaseVersion {
///         string name
///     }
///
///     ComponentVersion {
///         int component_id FK
///         int release_id FK nullable
///         int version_id FK
///     }
///
///     BuiltVersion {
///         int release_id FK nullable
///         int version_id FK
///     }
///
///     ReleaseComponent ||--o{ ComponentVersion : "has"
///     ReleaseVersion ||--o{ ComponentVersion : "used in"
///     JiraRelease ||--o{ ComponentVersion : "linked to"
///
///     ReleaseVersion ||--o{ BuiltVersion : "built as"
///     JiraRelease ||--o{ BuiltVersion : "linked to"
model ReleaseComponent {
    id                 String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    repository         String             @unique
    displayName        String
    releaseNamePattern String
    componentVersions  ComponentVersion[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
    deletedAt DateTime?
}

model JiraRelease {
    id                String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name              String             @unique
    syncedAt          DateTime
    componentVersions ComponentVersion[]
    builtVersions     BuiltVersion[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
    deletedAt DateTime?
}

model ReleaseVersion {
    id                String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name              String             @unique
    componentVersions ComponentVersion[]
    builtVersions     BuiltVersion[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
    deletedAt DateTime?
}

model ComponentVersion {
    id          String           @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    component   ReleaseComponent @relation(fields: [componentId], references: [id])
    componentId String           @db.Uuid
    release     JiraRelease?     @relation(fields: [releaseId], references: [id])
    releaseId   String?          @db.Uuid
    version     ReleaseVersion   @relation(fields: [versionId], references: [id])
    versionId   String           @db.Uuid

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
    deletedAt DateTime?

    @@index([componentId])
    @@index([releaseId])
    @@index([versionId])
}

model BuiltVersion {
    id        String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    release   JiraRelease?   @relation(fields: [releaseId], references: [id])
    releaseId String?        @db.Uuid
    version   ReleaseVersion @relation(fields: [versionId], references: [id])
    versionId String         @db.Uuid

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status    Status   @default(ACTIVE)
    deletedAt DateTime?

    @@index([releaseId])
    @@index([versionId])
}

model Post {
    id        String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.Uuid

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    userId                   String  @db.Uuid
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}