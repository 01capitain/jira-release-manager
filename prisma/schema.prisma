// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

// Generate Zod schemas from Prisma models to keep server/client types in sync
generator zod {
    provider      = "prisma-zod-generator"
    // Server-only: generate under src/server so clients don't import these directly
    output        = "../src/server/zod"
    relationModel = true
}

datasource db {
    provider   = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url        = env("DATABASE_URL")
    // Allow multi-schema setup for auth and app
    schemas    = ["app", "auth"]
    extensions = [pg_uuidv7]
}

/**
 * model ReleaseComponent {
 * id                 String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
 * repository         String?            @unique
 * displayName        String
 * releaseNamePattern String
 * componentVersions  ComponentVersion[]
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * }
 * model JiraRelease {
 * id                String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
 * name              String             @unique
 * syncedAt          DateTime?
 * componentVersions ComponentVersion[]
 * builtVersions     BuiltVersion[]
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * }
 */

model ReleaseVersion {
    id            String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name          String         @unique
    // componentVersions ComponentVersion[]
    builtVersions BuiltVersion[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.Uuid

    @@index([name])
    @@index([createdById])
    @@schema("app")
}

/**
 * model ComponentVersion {
 * id          String           @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
 * component   ReleaseComponent @relation(fields: [componentId], references: [id])
 * componentId String           @db.Uuid
 * release     JiraRelease?     @relation(fields: [releaseId], references: [id])
 * releaseId   String?          @db.Uuid
 * version     ReleaseVersion   @relation(fields: [versionId], references: [id])
 * versionId   String           @db.Uuid
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * @@index([componentId])
 * @@index([releaseId])
 * @@index([versionId])
 * }
 * model BuiltVersion {
 * id        String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
 * release   JiraRelease?   @relation(fields: [releaseId], references: [id])
 * releaseId String?        @db.Uuid
 * version   ReleaseVersion @relation(fields: [versionId], references: [id])
 * versionId String         @db.Uuid
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * @@index([releaseId])
 * @@index([versionId])
 * }
 */

model User {
    id              String           @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name            String?
    // TODO: Remove
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    ReleaseVersions ReleaseVersion[]
    BuiltVersions   BuiltVersion[]

    @@schema("app")
}

// Necessary for Next auth
// AUTH MODELS (mapped to auth schema)
model Account {
    id                       String  @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    userId                   String  @db.Uuid
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@schema("auth")
}

model Session {
    id           String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@schema("auth")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@schema("auth")
}

model BuiltVersion {
    id        String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name      String
    version   ReleaseVersion @relation(fields: [versionId], references: [id])
    versionId String         @db.Uuid

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.Uuid

    @@index([versionId])
    @@index([createdById])
    @@schema("app")
}
