// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

// Generate Zod schemas from Prisma models to keep server/client types in sync
generator zod {
    provider      = "prisma-zod-generator"
    // Server-only: generate under src/server so clients don't import these directly
    output        = "../src/server/zod"
    relationModel = true
}

datasource db {
    provider   = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url        = env("DATABASE_URL")
    // Allow multi-schema setup for auth and app
    schemas    = ["app", "auth"]
    extensions = [pg_uuidv7]
}

// --- Built Version lifecycle enums ---
enum BuiltVersionStatus {
    in_development
    in_deployment
    active
    deprecated

    @@schema("app")
}

enum BuiltVersionAction {
    start_deployment
    cancel_deployment
    mark_active
    revert_to_deployment
    deprecate
    reactivate

    @@schema("app")
}

model ReleaseVersion {
    id                String         @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name              String         @unique
    // componentVersions ComponentVersion[]
    builtVersions     BuiltVersion[]
    /// Tracks the last used builtVersion increment for this release
    /// Starts at -1 so the first auto-created builtVersion gets increment 0
    lastUsedIncrement Int            @default(-1)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.Uuid

    @@index([name])
    @@index([createdById])
    @@schema("app")
}

model User {
    id                     String                   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name                   String?
    // TODO: Remove
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    ReleaseVersions        ReleaseVersion[]
    BuiltVersions          BuiltVersion[]
    ReleaseComponents      ReleaseComponent[]
    BuiltVersionTransition BuiltVersionTransition[]

    @@schema("app")
}

// Necessary for Next auth
// AUTH MODELS (mapped to auth schema)
model Account {
    id                       String  @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    userId                   String  @db.Uuid
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@schema("auth")
}

model Session {
    id           String   @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@schema("auth")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@schema("auth")
}

model BuiltVersion {
    id                String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name              String
    version           ReleaseVersion     @relation(fields: [versionId], references: [id])
    versionId         String             @db.Uuid
    /// Snapshot of tokens used to generate this built version's name
    tokenValues       Json
    componentVersions ComponentVersion[]

    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    createdBy              User                     @relation(fields: [createdById], references: [id])
    createdById            String                   @db.Uuid
    BuiltVersionTransition BuiltVersionTransition[]

    @@index([versionId, createdAt])
    @@index([createdById])
    @@schema("app")
}

model ReleaseComponent {
    id                String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    name              String             @unique
    color             String
    namingPattern     String
    componentVersions ComponentVersion[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.Uuid

    @@index([createdById])
    @@schema("app")
}

model ComponentVersion {
    id                 String           @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    releaseComponent   ReleaseComponent @relation(fields: [releaseComponentId], references: [id])
    releaseComponentId String           @db.Uuid
    builtVersion       BuiltVersion     @relation(fields: [builtVersionId], references: [id])
    builtVersionId     String           @db.Uuid
    name               String
    increment          Int
    /// Snapshot of tokens used to generate this component version's name
    tokenValues        Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([releaseComponentId])
    @@index([builtVersionId])
    @@schema("app")
}

// History of state transitions for Built Versions.
model BuiltVersionTransition {
    id             String             @id @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
    builtVersion   BuiltVersion       @relation(fields: [builtVersionId], references: [id])
    builtVersionId String             @db.Uuid
    fromStatus     BuiltVersionStatus
    toStatus       BuiltVersionStatus
    action         BuiltVersionAction

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.Uuid

    @@index([builtVersionId, createdAt])
    @@schema("app")
}
